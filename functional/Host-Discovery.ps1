# Set the execution policy (in the actual end product, this will be done by the user(?) or at the beginning of the main script running)
# Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope Process
Import-Module $PSScriptRoot\modules\SubNet-Calculate.psm1

# Concept: 
# Using the ip address list generated by SubNet-Calculate.ps1 and the input arguments:
# For each ip address from the input (1+), calculate all the subnets, once the subnets are calculated, call ping through the whole list.
# Output the successfully pinged ip addresses (discovered hosts that are accessible)

#============= FOR TESTING, USING THE USER'S IP ADDRESS: THIS IS TEMPORARY!!=================
# Get the base IP Addresses, ignoring loopback (127.0.0.1), and selecting only IPV4 (FOR NOW!!) as well as just the object IPAddress CONVERT to string
$baseAddresses = (Get-NetIPAddress | Where-Object {$_.AddressFamily -eq 'IPv4' -and $_.InterfaceAlias -ne 'Loopback'} | Select-Object IPAddress)
foreach($baseAddress in $baseAddresses)
{
    # In actual case: rather than writing out all the subnets: ping each ip + the corresponding subnets
    # Arbitrary # of subnets
    Write-IPSubnet $baseAddress.IPAddress 20
}   

# Write-Output("Testing Connection with IPAddress: " + $address.IPAddress.ToString())
# Only get the results of connections where the PingSucceeded variable is TRUE, then output the successful computerames (IP)
# Test-NetConnection $addresses.IPAddress.ToString() | Where-Object {$_.PingSucceeded} | ForEach-Object{Write-Output($address.IPAddress.ToString())}