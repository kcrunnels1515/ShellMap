Import-Module $PSScriptRoot\modules\SubNet-Calculate.psm1

# Concept: 
# Using the ip address list generated by SubNet-Calculate.ps1 and the input arguments:
# For each ip address from the input (1+), calculate all the subnets, once the subnets are calculated, call ping through the whole list.
# Output the successfully pinged ip addresses (discovered hosts that are accessible)

#============= FOR TESTING, USING THE USER'S IP ADDRESS: THIS IS TEMPORARY!!=================
# Get the base IP Addresses, ignoring loopback (127.0.0.1), and selecting only IPV4 (FOR NOW!!) as well as just the object IPAddress CONVERT to string
$baseAddress = (Get-NetIPAddress | Where-Object {$_.AddressFamily -eq 'IPv4' -and $_.InterfaceAlias -ne 'Loopback'} | Select-Object IPAddress)[0]

# Get the number of subnets wanted for the base address (arbitrary 24)
$ipAddresses = Select-IPSubnet $baseAddress.IPAddress 24

foreach($ipAddress in $ipAddresses)
{
    Write-Output "Scan report for $ipAddress"

    # ICMP echo request (PING): with -Quiet to do basic ping 
    # and only return output of those where ping is "Succeeded", true = reached target
    $pingCheck = Test-Connection $ipAddress -Quiet
    if($pingCheck)
    {
        Write-Output "Host is up"
    } else 
    {
        Write-Output "Host is down"
    }

    # Note: it is possible for host to be down but the port open since port check is separate (not whole system health)
    # TCP SYN Packet to port 443: "TCPTest Succeeded", true = open, false = closed
    $portCheck = Test-NetConnection $ipAddress -Port 433 -InformationLevel:Quiet
    if($portCheck)
    {
        Write-Output "Port 433 is open"
    } else 
    {
        Write-Output "Port 433 is closed"
    }

    Write-Output "-------------------------"

    # TCP ACK
    # $ackCheck 
}   
